# 使用selenium+chromedriver来实现12306抢票

#1.让浏览器打开12306的登入界面手动进行登入
#2.登入完成后让浏览器跳转到购票界面
#3.手动的输入出发地，目的地以及出发日期，检测到以上三个信息都输入完成后，然后找到查询按钮，执行点击事件，进行车次查询
#4.查找我们需要的车次，然后看下对应的席位是否还有余票（有、数字）。找到这个车次的预定按钮，然后执行点击事件。如果没有出现
#以上的两个（有、数字），那么我们就循环这个查询工作。
#5.一旦检测到有票（有、数字），那么执行预定按钮的点击事件。来到预定的界面后，找到对应的乘客，然后执行这个乘客的checkbox
#再找到提交订单的按钮，执行点击事件。
#6.点击完提交订单按钮以后，会弹出一个确认的对话框，然后找到“确认按钮”，然后执行点击事件。这样就完成了抢票
from selenium import webdriver
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By



class Qiangpiao(object):
    def __init__(self):
        self.login_url = "https://kyfw.12306.cn/otn/resources/login.html"
        self.initmy_url = "https://kyfw.12306.cn/otn/view/index.html"
        self.search_url = "https://kyfw.12306.cn/otn/leftTicket/init?linktypeid=dc"
        self.passenger_url="https://kyfw.12306.cn/otn/confirmPassenger/initDc"
        self.driver = webdriver.Chrome(executable_path=r"C:\Downloads\driver\chromedriver.exe")

    def wait_input(self):
        self.from_station = input("起始站:")
        self.to_station = input("目的地:")
        # 时间格式必须是:yyyy-MM-dd方式
        self.depart_time = input("出发时间:")
        self.passengers = input("乘客姓名(如果有多个乘客，用英文逗号分开):").split(",")
        self.trains = input("车次(如果有多个车次，用英文逗号隔开):").split(",")

    def _login(self):#登入功能实现
        self.driver.get(self.login_url)
        # 显示等待
        WebDriverWait(self.driver, 1000).until(EC.url_to_be(self.initmy_url))#url_to_be当前的url是否是等于传进去的url
        print('登入成功')

    def _order_ticket(self):
        # 1.跳转到查余票的界面
        self.driver.get(self.search_url)
        # 2.等待出发地是否输入正确
        WebDriverWait(self.driver, 1000).until(
            EC.text_to_be_present_in_element_value((By.ID, "fromStationText"), self.from_station))#文本呈现
        # 3.目的地是否输入正确
        WebDriverWait(self.driver, 1000).until(
            EC.text_to_be_present_in_element_value((By.ID, "toStationText"), self.to_station))
        # 4.出发日期是否输入正确
        WebDriverWait(self.driver, 1000).until(
            EC.text_to_be_present_in_element_value((By.ID, "train_date"), self.depart_time))
        # 5.等待查询按钮是否可用
        WebDriverWait(self.driver, 1000).until(
            EC.element_to_be_clickable((By.ID, "query_ticket")))
        # 6.如果能够被点击了，那么就找到这个查询按钮执行点击事件
        searchBtn = self.driver.find_element_by_id("query_ticket")
        searchBtn.click()
        #7.在点击查询按钮之后，等待车次信息是否出来了
        WebDriverWait(self.driver,1000).until(
            EC.presence_of_element_located((By.XPATH,".//tbody[@id='queryLeftTable']/tr"))
        )

        #8.找到所有没有datatran属性的tr标签，这些标签是存储了车次信息的
        tr_list = self.driver.find_elements_by_xpath(".//tbody[@id='queryLeftTable']/tr[not(@datatran)]")
        #9.遍历所有满足条件的tr标签
        for tr in tr_list:
            train_number = tr.find_element_by_class_name("number").text
            if train_number in self.trains:
                left_ticket_td = tr.find_element_by_xpath(".//td[4]").text
                if left_ticket_td=="有" or left_ticket_td.isdigit:
                    orderBtin = tr.find_element_by_class_name("btn72")
                    orderBtin.click()

                    #等待是否来到了确认乘客页面
                    WebDriverWait(self.driver,1000).until(EC.url_to_be(self.passenger_url))



    def run(self):
        self.wait_input()
        self._login()
        self._order_ticket()



if __name__ == '__main__':
    spider = Qiangpiao()
    spider.run()

